
Лабораторна робота №5
Автор: Ветріченко Дарина Ігорівна
Група: КН-924з
Тема: Циклічні конструкції

Завдання:
Визначити, чи є задане ціле число простим.
Просте число — це число, більше за 1, яке ділиться тільки на 1 і на себе.

Опис програми:

Введення числа: Користувач вводить ціле число.
Перевірка на простоту:
Якщо число менше або дорівнює 1, воно не є простим.
Для чисел більше 1 програма використовує цикл do while, щоб перевірити, чи є дільники від 2 до квадратного кореня з числа. Якщо знайдено дільник, число не є простим.
Виведення результату: Програма виводить, чи є число простим, чи ні.


ВПерелік вхідних даних:

number — ціле число, яке потрібно перевірити.
Перелік змінних:

isPrime — логічна змінна, що визначає, чи є число простим.
i — поточний дільник числа.
Дослідження результатів роботи програми:

Для числа 7:
Перевірка дільників: 2. Жодне не є дільником.
Результат:
7 є простим числом. 
Структура проекту лабораторної роботи:
.
└── lab04
    ├── Makefile
    ├── README.md
    ├── doc
    │   └── lab04.txt
    └── src
        └── main.c
Контрольні питання:
Контрольні питання:
Як записується і як працює оператор for?
Оператор for використовується для виконання циклу із заздалегідь відомою кількістю ітерацій.
Синтаксис:
for (ініціалізація; умова; оновлення) {
    // Тіло циклу
}
У чому відмінність оператора while від оператора do ... while?
У while перевірка умови виконується перед входом у цикл. Якщо умова хибна, цикл не виконується.
У do ... while тіло циклу виконується щонайменше один раз, оскільки перевірка умови виконується після тіла циклу.
Як програмуються циклічні алгоритми з явно заданою кількістю повторень циклу?
Такі алгоритми реалізуються за допомогою оператора for.
Приклад:
for (int i = 0; i < 5; i++) {
    printf("Ітерація %d\n", i);
}
Як програмуються циклічні алгоритми із заздалегідь невідомим числом повторень циклу?
Використовуються оператори while або do ... while, де умова залежить від стану програми.
Приклад:
int n = 0;
while (n != 10) {
    printf("Введіть число (10 для виходу): ");
    scanf("%d", &n);
}
Напишіть оператор циклу, який не виконується жодного разу.
Приклад:
for (int i = 0; i < 0; i++) {
    printf("Цей код не виконається\n");
}
Напишіть оператор циклу, який виконується необмежену кількість разів.
Приклад:
while (1) {
    printf("Цей цикл триває безкінечно\n");
}
Замініть фрагмент програми з оператором for рівнозначним фрагментом програми з оператором while.
Оригінал із for:
for (int i = 0; i < 5; i++) {
    printf("%d\n", i);
}
Заміна на while:

int i = 0;
while (i < 5) {
    printf("%d\n", i);
    i++;
}
Замініть фрагмент програми з оператором for рівнозначним фрагментом програми з оператором do while.
Оригінал із for:
for (int i = 0; i < 5; i++) {
    printf("%d\n", i);
}
Заміна на do ... while:

int i = 0;
do {
    printf("%d\n", i);
    i++;
} while (i < 5);
Як можна перервати виконання оператора циклу?
Використовується оператор break. Він припиняє виконання циклу незалежно від його умови.
Яке призначення операторів break і continue?
break — завершує виконання циклу повністю.
continue — пропускає залишок тіла циклу та переходить до наступної ітерації.
Висновки:
Під час виконання лабораторної роботи були набуті практичні навички:

Використання циклічних конструкцій (for, while, do ... while) у мові програмування C.
Розробки алгоритмів із заздалегідь відомою та невідомою кількістю повторень циклу.
Використання операторів break і continue для керування циклом.
Розробки програми для перевірки простого числа із застосуванням циклічних алгоритмів.